{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":""},{"location":"builder/","title":"Builder","text":"<p>Usar o padr\u00e3o builder s\u00f3 faz sentido quando seus produtos s\u00e3o bem complexos requerem configura\u00e7\u00e3o extensiva. Os dois produtos a seguir s\u00e3o relacionados, embora eles n\u00e3o tenham uma interface em comum.</p>"},{"location":"builder/#aplicabilidade","title":"Aplicabilidade","text":"<ul> <li>Use o padr\u00e3o <code>Builder</code> para se livrar de um \"construtor telesc\u00f3pico\".</li> <li>Use o padr\u00e3o Builder quando voc\u00ea quer que seu c\u00f3digo seja capaz de criar   diferentes representa\u00e7\u00e3oes do mesmo produto (por exemplo, casas de pedra e madeira).</li> <li>Use o <code>Builder</code> para construir \u00e1rvores <code>Composite</code> ou outros objetos complexos.</li> </ul>"},{"location":"builder/#como-implementar","title":"Como implementar","text":"<ol> <li> <p>Certifique-se quer voc\u00ea pode definir claramente as etapas comuns de constru\u00e7\u00e3o para construir todas as representa\u00e7\u00f5es do produto dispon\u00edneis. Do contr\u00e1rio, voc\u00ea n\u00e3o ser\u00e1 capaz de implemnentar o pradr\u00e3o.</p> </li> <li> <p>Declare essas etapas na interface builder base.</p> </li> <li> <p>Crie uma classe builder concreta para cada representa\u00e7\u00e3o do produto e implemnente suas etapas de constru\u00e7\u00e3o. N\u00e3o se esque\u00e7a de implementar um m\u00e9todo para recuperar os resultados da constru\u00e7\u00e3o. O motivo pelo qual esse m\u00e9todo n\u00e3o pode ser declarado dentro da interface do builder \u00e9 porque v\u00e1rios builders podem construir produtos que n\u00e3o tem uma inferface comum. Portanto, voc\u00ea n\u00e3o sabe qual ser\u00e1 o tipo de retorno para tal m\u00e9todo. Contudo, se voc\u00ea est\u00e1 lidando com produtos de uma \u00fanica hierarquia, o m\u00e9todo de obten\u00e7\u00e3o pode ser adicionado com seguran\u00e7a para a interface base.</p> </li> <li> <p>Pense em criar uma classe diretor. Ela pode encapsular v\u00e1rias maneiras de construir um produto usando o mesmo objeto builder.</p> </li> <li> <p>O c\u00f3digo cliente cria tanto os objetos do builder como do diretor. Antes da constru\u00e7\u00e3o come\u00e7ar,, o cliente deve passar um objeto builder para o diretor. Geralmente o cliente faz isso apenas uma vez, atrav\u00e9s de par\u00e2metros do construtor do diretor. O diretor usa o objeto builder em todas as contru\u00e7\u00f5es futuras. Existe uma alternativa onde o builder \u00e9 passado diretamente ao m\u00e9todo de constru\u00e7\u00e3o do diretor.</p> </li> <li> <p>O resultado da constru\u00e7\u00e3o pode ser obtido diretamente do diretor apenas se todos os produtos seguirem a mesma interface. Do contr\u00e1rio o cliente deve obter o resultado do builder.</p> </li> </ol>"},{"location":"builder/#src.builder.Builder","title":"<code>Builder</code>","text":"<p>             Bases: <code>ABC</code></p> <p>Abistract class</p>"},{"location":"builder/#src.builder.CarBuilder","title":"<code>CarBuilder</code>","text":"<p>             Bases: <code>Builder</code></p> <p>Classe respons\u00e1vel por criar o objeto carro</p>"},{"location":"builder/#src.builder.CarBuilder.set_engine","title":"<code>set_engine(engine)</code>","text":"<p>Diz qual o motor do carro</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>str</code> <p>Modelo do motor</p> required <p>Returns:</p> Name Type Description <code>None</code> <code>None</code>"},{"location":"builder/#src.builder.Director","title":"<code>Director</code>","text":"<p>O diretor serve para criar o objetos complexos</p> <pre><code>&gt;&gt;&gt; d = Director()\n&gt;&gt;&gt; c = CarBuilder()\n&gt;&gt;&gt; d.make(c)\n&gt;&gt;&gt; p = c.get_product()\n&gt;&gt;&gt; print(p.engine)\n</code></pre>"},{"location":"builder/#src.builder.Director.make","title":"<code>make(builder)</code>","text":"<p>Cria o objeto</p>"},{"location":"prototype/","title":"Prototype","text":""}]}